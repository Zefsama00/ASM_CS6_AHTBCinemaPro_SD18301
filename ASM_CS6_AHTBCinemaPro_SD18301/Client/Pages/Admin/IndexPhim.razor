@page "/QLPhim"
@using ASM_CS6_AHTBCinemaPro_SD18301.Client.Pages.Admin.SharedAdmin
@using ASM_CS6_AHTBCinemaPro_SD18301.Model
@using ASM_CS6_AHTBCinemaPro_SD18301.Shared.Models
@using ASM_CS6_AHTBCinemaPro_SD18301.Shared.ViewModels
@using Newtonsoft.Json
@using System.IO
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@layout _LayoutAdmin
<link href="css/QLP.css" rel="stylesheet">

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

@code {
    private List<PhimVM> movies;
    private PhimVM newMovie = new PhimVM();
    private PhimVM updateMovie = new PhimVM();
    private bool isEditMode = false;
    // private List<LoaiPhim> categories = new List<LoaiPhim>();
    private bool sortAscending = true; // Biến lưu trữ trạng thái sắp xếp


    private async Task SortByDangPhim()
    {
        if (sortAscending)
        {
            movies = movies.OrderBy(m => m.DangPhim).ToList();
        }
        else
        {
            movies = movies.OrderByDescending(m => m.DangPhim).ToList();
        }
        sortAscending = !sortAscending; // Chuyển đổi trạng thái sắp xếp
        StateHasChanged(); // Cập nhật giao diện người dùng
    }

    private Task<List<PhimVM>> GetMoviesAsync()
    {
        // Lấy danh sách phim từ cơ sở dữ liệu hoặc API
        // Placeholder method for demonstration
        return Task.FromResult(new List<PhimVM>());
    }
    protected override async Task OnInitializedAsync()
    {
        var responsemovies = await Http.GetStringAsync("api/phim/listphim");
        movies = JsonConvert.DeserializeObject<List<PhimVM>>(responsemovies);
        // var responseloaiphim = await Http.GetStringAsync("api/Loaiphim");
        // categories = JsonConvert.DeserializeObject<List<LoaiPhim>>(responseloaiphim);
    }

    private async Task AddMovie()
    {
        isEditMode = false;
        newMovie = new PhimVM();
        await Task.Yield();
        JS.InvokeVoidAsync("showModal", isEditMode);
    }

    private async Task EditMovie(PhimVM movie)
    {
        isEditMode = true;
        updateMovie = movie;
        await Task.Yield();
        JS.InvokeVoidAsync("showModal", isEditMode);
    }

    private async Task HandleValidSubmit()
    {
        if (isEditMode)
        {
            await Http.PutAsJsonAsync($"api/phim/{updateMovie.IdPhim}", updateMovie);
        }
        else
        {
            await Http.PostAsJsonAsync("api/phim/addphim", newMovie);
        }

        JS.InvokeVoidAsync("hideModal", isEditMode);
        JS.InvokeVoidAsync("handleAlertAndReload");
    }

    private async Task UploadImage(InputFileChangeEventArgs e, PhimVM movie)
    {
        var file = e.File;
        using (var content = new MultipartFormDataContent())
        {
            var fileContent = new StreamContent(file.OpenReadStream());
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);
            movie.HinhAnh = file.Name;
            var response = await Http.PostAsync("api/phim/upload-image", content);
            if (response.IsSuccessStatusCode)
            {
                var imagePath = await response.Content.ReadAsStringAsync();
            }
            else
            {
                // Xử lý lỗi nếu việc upload ảnh không thành công
            }
        }
    }

}

<h2 class="text-center">
    <i class="fas fa-film"></i> Quản lý Phim
</h2>

<button class="btn btn-primary mb-2" @onclick="AddMovie">
    <i class="fas fa-plus"></i> Thêm Phim Mới
</button>

<table class="table table-striped table-bordered">
    <thead class="thead-dark">
        <tr>
            <th><i class="fas fa-film"></i> Tên Phim</th>
            <th><i class="fas fa-tags"></i> Thể Loại</th>
            <th><i class="fas fa-clock"></i> Thời Lượng</th>
            <th style="cursor:pointer" @onclick="SortByDangPhim">
                <i class="fas fa-film"></i> Dạng Phim
            </th>
            <th><i class="fas fa-users"></i> Diễn Viên</th>
            <th><i class="fas fa-image"></i> Hình Ảnh</th>
            <th><i class="fas fa-cogs"></i> Hành Động</th>
        </tr>
    </thead>
    <tbody>
        @if (movies == null)
        {
            <tr>
                <td colspan="7" class="text-center"><em>Loading....</em></td>
            </tr>
        }
        else
        {
            @foreach (var movie in movies)
            {
                <tr>
                    <td>@movie.TenPhim</td>
                    <td>@movie.TheLoai</td>
                    <td>@movie.ThoiLuong</td>
                    <td>@movie.DangPhim</td>
                    <td>@movie.DienVien</td>
                    <td>
                        <img src="/image/Phim2/@movie.HinhAnh" alt="@movie.HinhAnh" style="width:100px; height:auto;" />
                    </td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditMovie(movie)">
                            <i class="fas fa-edit"></i> Chỉnh Sửa
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<!-- Modal cho thêm và chỉnh sửa phim -->
<MovieModal Movie="isEditMode ? updateMovie : newMovie"
            IsEditMode="isEditMode"
            OnImageSelected="(e) => UploadImage(e, isEditMode ? updateMovie : newMovie)"
            OnValidSubmit="HandleValidSubmit" />

<script>
    document.getElementById('fileInput').addEventListener('change', function (event) {
        var file = event.target.files[0];
        var reader = new FileReader();

        reader.onload = function (e) {
            var dataUrl = e.target.result;
            // Hiển thị hình ảnh xem trước
            document.getElementById('imagePreview').src = dataUrl;
        };

        reader.readAsDataURL(file);
    });
</script>