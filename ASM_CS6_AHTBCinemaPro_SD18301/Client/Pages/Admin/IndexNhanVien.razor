@page "/nhanvien"
@using ASM_CS6_AHTBCinemaPro_SD18301.Models
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms
@using ASM_CS6_AHTBCinemaPro_SD18301.Client.Pages.Admin.SharedAdmin
@layout _LayoutAdmin

<h3>Danh sách nhân viên</h3>

@if (!string.IsNullOrEmpty(AlertMessage))
{
    <div class="alert alert-@AlertType alert-dismissible fade show" role="alert">
        @AlertMessage
        <a type="button" aria-label="Close" @onclick="() => AlertMessage = null">
            <i class="fa fa-times" style="margin-left: 5px" aria-hidden="true"></i>
        </a>
    </div>
}
<div class="row mb-3">
    <div class="col-md-6 text-end">
        <button class="btn btn-success" @onclick="ShowAddModal">Thêm nhân viên mới</button>
    </div>
</div>
<div class="container">
    @if (nhanviens == null)
    {
        <p><em>Đang tải...</em></p>
    }
    else if (nhanviens.Count == 0)
    {
        <p>Không có nhân viên nào có sẵn.</p>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Tên nhân viên</th>
                    <th>Số điện thoại</th>
                    <th>Email</th>
                    <th>Chức vụ</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var nv in nhanviens)
                {
                    <tr>
                        <td>@nv.TenNV</td>
                        <td>@nv.SDT</td>
                        <td>@nv.Email</td>
                        <td>@nv.ChucVu</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => EditNhanVien(nv)">Sửa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Modal for Add/Edit -->
@if (IsModalVisible)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEditing ? "Sửa chức vụ nhân viên" : "Thêm nhân viên mới"))</h5>
                    <button type="button" class="btn-close" aria-label="Đóng" @onclick="CloseModal">Đóng</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentNhanVien" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        @if (isEditing)
                        {
                            <div class="mb-3">
                                <label for="TenNV" class="form-label">Tên nhân viên</label>
                                <InputText id="TenNV" class="form-control" @bind-Value="currentNhanVien.TenNV" readonly/>
                            </div>
                         
                            <div class="mb-3">
                                <label for="ChucVu" class="form-label">Chức vụ</label>
                                <InputSelect id="ChucVu" class="form-control" @bind-Value="currentNhanVien.ChucVu">
                                    <option value="Nhân viên">Nhân viên</option>
                                    <option value="Quản lý">Quản lý</option>
                                </InputSelect>
                            </div>
                         
                        }
                        else
                        {
                            <div class="mb-3">
                                <label for="TenNV" class="form-label">Tên nhân viên</label>
                                <InputText id="TenNV" class="form-control" @bind-Value="currentNhanVien.TenNV" />
                            </div>
                            <div class="mb-3">
                                <label for="SDT" class="form-label">Số điện thoại</label>
                                <InputText id="SDT" class="form-control" @bind-Value="currentNhanVien.SDT" />
                            </div>
                            <div class="mb-3">
                                <label for="Email" class="form-label">Email</label>
                                <InputText id="Email" class="form-control" @bind-Value="currentNhanVien.Email" />
                            </div>
                            <div class="mb-3">
                                <label for="ChucVu" class="form-label">Chức vụ</label>
                                <InputSelect id="ChucVu" class="form-control" @bind-Value="currentNhanVien.ChucVu">
                                    <option value="Nhân viên">Nhân viên</option>
                                    <option value="Quản lý">Quản lý</option>
                                </InputSelect>
                            </div>
                           

                            <div class="mb-3">
                                <label for="Password" class="form-label">Mật khẩu</label>
                                <InputText id="Password" type="password" class="form-control" @bind-Value="currentNhanVien.Password" />
                            </div>
                            <div class="mb-3">
                                <label for="NamSinh" class="form-label">Ngày sinh</label>
                                <InputDate id="NamSinh" class="form-control" @bind-Value="currentNhanVien.NamSinh" />
                            </div>
                        }
                        <button type="submit" class="btn btn-primary">@((isEditing ? "Lưu thay đổi" : "Thêm nhân viên"))</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<NhanVien> nhanviens;
    private NhanVien currentNhanVien = new NhanVien();
    private bool isEditing = false;
    private bool IsModalVisible = false;
    private string AlertMessage;
    private string AlertType;

    protected override async Task OnInitializedAsync()
    {
        await LoadNhanViens();
    }

    private async Task LoadNhanViens()
    {
        try
        {
            var response = await Http.GetStringAsync("api/NhanVien/nhanvien");
            nhanviens = JsonConvert.DeserializeObject<List<NhanVien>>(response);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void ShowAddModal()
    {
        currentNhanVien = new NhanVien();
        isEditing = false;
        IsModalVisible = true;
    }

    private void EditNhanVien(NhanVien nhanVien)
    {
        currentNhanVien = new NhanVien
            {
                IdNV = nhanVien.IdNV,
                TenNV = nhanVien.TenNV,
                SDT = nhanVien.SDT,
                Email = nhanVien.Email,
                ChucVu = nhanVien.ChucVu,
                Password = nhanVien.Password,
                NamSinh = nhanVien.NamSinh
            };
        isEditing = true;
        IsModalVisible = true;
    }

    private void CloseModal()
    {
        IsModalVisible = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEditing)
            {
                // Chỉ cập nhật Chức Vụ
                var response = await Http.PutAsJsonAsync($"api/NhanVien/{currentNhanVien.IdNV}", currentNhanVien);
                await ShowSweetAlert(response.IsSuccessStatusCode, "Cập nhật chức vụ nhân viên thành công", "Cập nhật chức vụ nhân viên thất bại");
            }
            else
            {
                // Thêm nhân viên mới
                var response = await Http.PostAsJsonAsync("api/NhanVien", currentNhanVien);
                await ShowSweetAlert(response.IsSuccessStatusCode, "Thêm nhân viên thành công", "Thêm nhân viên thất bại");
            }

            await LoadNhanViens();
            CloseModal();
        }
        catch (Exception ex)
        {
            AlertType = "danger";
            AlertMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }
    private async Task ShowSweetAlert(bool isSuccess, string successMessage, string errorMessage)
    {
        if (isSuccess)
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Thành công", successMessage, "success");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Thất bại", errorMessage, "error");
        }
    }


}

