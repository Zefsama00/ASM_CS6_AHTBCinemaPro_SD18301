@page "/QLNC"
@using ASM_CS6_AHTBCinemaPro_SD18301.Model
@using ASM_CS6_AHTBCinemaPro_SD18301.Models
@using ASM_CS6_AHTBCinemaPro_SD18301.Shared.ViewModels
@using Newtonsoft.Json
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using ASM_CS6_AHTBCinemaPro_SD18301.Client.Pages.Admin.SharedAdmin
@layout _LayoutAdmin

<link href="/css/GC.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

@code {
    private List<NgayChieuVM> ngayChieus;
    private List<PhimVM> phims;
    private List<Phong> phongs;

    private NgayChieuVM newNgayChieu = new NgayChieuVM();
    private string notificationMessage;
    private string notificationType; // "success" or "error"
    private bool showAlert;
    private bool isEditMode = false; // Thêm biến để kiểm tra chế độ chỉnh sửa
    private int editingNgayChieuId = 0; // ID của ngày chiếu đang được chỉnh sửa

    protected override async Task OnInitializedAsync()
    {
        showAlert = true;
        await LoadData();
    }

    private async Task LoadData()
    {
        var response = await Http.GetStringAsync("api/ngaychieus");
        ngayChieus = JsonConvert.DeserializeObject<List<NgayChieuVM>>(response);

        var respone = await Http.GetStringAsync("api/Phim/listphim");
        phims = JsonConvert.DeserializeObject<List<PhimVM>>(respone);

        var responses = await Http.GetStringAsync("api/Phong");
        phongs = JsonConvert.DeserializeObject<List<Phong>>(responses);
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response = null;
        try
        {
            if (isEditMode)
            {
                response = await Http.PutAsJsonAsync($"api/ngaychieus/{editingNgayChieuId}", newNgayChieu);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/ngaychieus", newNgayChieu);
            }

            if (response.IsSuccessStatusCode)
            {
                notificationMessage = isEditMode ? "Cập nhật ngày chiếu thành công!" : "Lưu ngày chiếu thành công!";
                notificationType = "success";
                showAlert = true;

                // Reset form
                newNgayChieu = new NgayChieuVM();
                isEditMode = false; // Reset chế độ chỉnh sửa

                // Ẩn modal
                await JS.InvokeVoidAsync("hideModal", "#myModal");

                // Gọi hàm để tải lại dữ liệu và cập nhật giao diện
                await RefreshData();
                await JS.InvokeVoidAsync("handleAlertAndReload");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                var errorMessage = isEditMode ? "Cập nhật ngày chiếu thất bại." : "Lưu ngày chiếu thất bại.";

                if (!string.IsNullOrWhiteSpace(errorResponse))
                {
                    var errorData = JsonConvert.DeserializeObject<dynamic>(errorResponse);
                    errorMessage = errorData?.message ?? errorMessage;
                }

                notificationMessage = errorMessage;
                notificationType = "error";
                showAlert = true;

                // Ẩn modal
                await JS.InvokeVoidAsync("hideModal", "#myModal");
                await JS.InvokeVoidAsync("handleAlertAndReload");
            }
        }
        catch (Exception ex)
        {
            notificationMessage = isEditMode ? "Cập nhật thất bại" : "Lưu thất bại";
            notificationType = "error";
            showAlert = true;

            await JS.InvokeVoidAsync("hideModal", "#myModal");
            await JS.InvokeVoidAsync("handleAlertAndReload");
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
        StateHasChanged();
    }

    private string GetAlertClass(string alertType)
    {
        return alertType == "success" ? "alert-success" : "alert-danger";
    }

    private async Task EditNgayChieu(NgayChieuVM ngayChieu)
    {
        newNgayChieu = new NgayChieuVM
            {
                IdCaChieu = ngayChieu.IdCaChieu,
                Phong = ngayChieu.Phong,
                Phim = ngayChieu.Phim,
                NgayChieu = ngayChieu.NgayChieu,
                TrangThai = ngayChieu.TrangThai
            };

        editingNgayChieuId = ngayChieu.IdCaChieu;
        isEditMode = true;

        await JS.InvokeVoidAsync("showModal", "#myModal");
    }

    [JSInvokable]
    public async Task SetShowAlert(bool show)
    {
        showAlert = show;
        if (!show)
        {
            notificationMessage = string.Empty;
            notificationType = string.Empty;
        }
        await InvokeAsync(StateHasChanged);
    }
}

<h1>Danh sách Ngày Chiếu</h1>
<button class="btn btn-primary" @onclick='async () => { newNgayChieu = new NgayChieuVM(); isEditMode = false; await JS.InvokeVoidAsync("showModal", "#myModal"); }'> <i class="fas fa-plus"></i> Thêm Ngày Chiếu Mới</button>

@if (showAlert == true)
{
    <div id="notificationAlert" class="alert @GetAlertClass(notificationType) alert-dismissible fade" role="alert">
        @notificationMessage
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (ngayChieus == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table text-dark">
        <thead>
            <tr>
                <th><i class="fas fa-calendar-alt"></i> Ngày Chiếu</th>
                <th><i class="fas fa-film"></i> Phim</th>
                <th><i class="fas fa-building"></i> Phòng</th>
                <th><i class="fas fa-info-circle"></i> Trạng Thái</th>
                <th><i class="fas fa-cogs"></i> Hành Động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ngayChieus)
            {
                <tr>
                    <td>Ngày @item.NgayChieu.ToString("dd/MM/yyyy")</td>
                    <td>@item.Phim</td>
                    <td>@item.Phong</td>
                    <td>@item.TrangThai</td>
                    <td>
                        <button class="btn btn-primary" @onclick="async () => await EditNgayChieu(item)"><i class="fas fa-edit"></i> Cập nhật</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalLabel">
                    @if (isEditMode)
                    {
                        <p><i class="fas fa-edit"></i> Cập Nhật Ngày Chiếu</p>
                    }
                    else
                    {
                        <p><i class="fas fa-plus"></i> Thêm Ngày Chiếu Mới</p>
                    }
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="newNgayChieu" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="ngayChieu">Ngày Chiếu:</label>
                        <InputDate id="ngayChieu" class="form-control" @bind-Value="newNgayChieu.NgayChieu" />
                        <ValidationMessage For="@(() => newNgayChieu.NgayChieu)" />
                    </div>
                    <div class="form-group">
                        <label for="phim">Phim:</label>
                        @if (isEditMode)
                        {
                            <InputText disabled id="phim" class="form-control" @bind-Value="newNgayChieu.Phim" />
                        }
                        else
                        {
                            <InputSelect id="phim" class="form-control" @bind-Value="newNgayChieu.Phim">
                                <option value="">-- Chọn Phim --</option>
                                @if (phims == null)
                                {
                                    <p>Loading...</p>
                                }
                                else
                                {
                                    @foreach (var phim in phims)
                                    {
                                        <option value="@phim.IdPhim">@phim.TenPhim</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newNgayChieu.Phim)" />
                        }
                    </div>
                    <div class="form-group">
                        <label for="phong">Phòng:</label>
                        @if (isEditMode)
                        {
                            <InputNumber disabled id="phong" class="form-control" @bind-Value="newNgayChieu.Phong" />
                        }
                        else
                        {
                            <InputSelect id="Phong" class="form-control" @bind-Value="newNgayChieu.IdPhong">
                                <option value="">-- Chọn Phòng --</option>
                                @if (phongs == null)
                                {
                                    <p>Loading...</p>
                                }
                                else
                                {
                                    @foreach (var phong in phongs)
                                    {
                                        <option value="@phong.IdPhong">@phong.SoPhong</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newNgayChieu.Phong)" />
                        }
                    </div>
                    @if (isEditMode)
                    {
                        <button type="submit" class="btn btn-primary"><i class="fas fa-edit"></i> Cập Nhật</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary"><i class="fas fa-plus"></i> Lưu Thông Tin</button>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
    window.showModal = function (selector) {
        if (typeof $ !== 'undefined') {
            $(selector).modal('show');
        } else {
            console.error('jQuery is not defined.');
        }
    }

    window.hideModal = function (selector) {
        if (typeof $ !== 'undefined') {
            $(selector).modal('hide');
        } else {
            console.error('jQuery is not defined.');
        }
    }

    window.handleAlertAndReload = function () {
        $('#notificationAlert').addClass('show');
        setTimeout(function () {
            $('#notificationAlert').addClass('fade');
            setTimeout(function () {
                $('#notificationAlert').removeClass('show');
                setTimeout(function () {
                    Blazor.invokeMethodAsync('SetShowAlert', false);
                    Blazor.invokeMethodAsync('AssemblyName', 'RefreshData');
                }, 500);
            }, 100);
        }, 3000);
    }
</script>