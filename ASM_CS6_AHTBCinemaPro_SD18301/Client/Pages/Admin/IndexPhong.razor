@page "/phong"
@using ASM_CS6_AHTBCinemaPro_SD18301.Models
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms

<h3>Danh sách phòng</h3>

@if (!string.IsNullOrEmpty(AlertMessage))
{
    <div class="alert alert-@AlertType alert-dismissible fade show" role="alert">
        @AlertMessage
        <a type="button" aria-label="Close" @onclick="() => AlertMessage = null">
            <i class="fa fa-times" style="margin-left: 5px" aria-hidden="true"></i>
        </a>
    </div>
}

<div class="container">
    @if (rooms == null)
    {
        <p><em>Đang tải...</em></p>
    }
    else if (rooms.Count == 0)
    {
        <p>Không có phòng nào có sẵn.</p>
    }
    else
    {
        <div class="row mb-3">
            <div class="col-md-6 text-end">
                <button class="btn btn-success" @onclick="ShowAddModal">Thêm phòng mới</button>
            </div>
        </div>

        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Số phòng</th>
                    <th>Trạng thái</th>
                    <th>Số lượng ghế</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var phong in rooms)
                {
                    <tr>
                        <td>@phong.SoPhong</td>
                        <td>@phong.TrangThai</td>
                        <td>@phong.SoLuongGhe</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => EditPhong(phong)">Sửa</button>
                           @*  <button class="btn btn-danger btn-sm" @onclick="() => DeletePhong(phong.IdPhong)">Xóa</button> *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Modal for Add/Edit -->
@if (IsModalVisible)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEditing ? "Sửa phòng" : "Thêm phòng mới"))</h5>
                    <button type="button" class="btn-close" aria-label="Đóng" @onclick="CloseModal">Đóng</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentPhong" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                     @*    <div class="mb-3">
                            <label for="IdPhong" class="form-label">ID Phòng</label>
                            <InputText id="IdPhong" class="form-control" @bind-Value="currentPhong.IdPhong" disabled="@isEditing" />
                        </div> *@
                        <div class="mb-3">
                            <label for="SoPhong" class="form-label">Số phòng</label>
                            <InputNumber id="SoPhong" class="form-control" @bind-Value="currentPhong.SoPhong" />
                        </div>
                        <div class="mb-3">
                            <label for="TrangThai" class="form-label">Trạng thái</label>
                            <InputText id="TrangThai" class="form-control" @bind-Value="currentPhong.TrangThai" />
                        </div>
                        <div class="mb-3">
                            <label for="SoLuongGhe" class="form-label">Số lượng ghế</label>
                            <InputNumber id="SoLuongGhe" class="form-control" @bind-Value="currentPhong.SoLuongGhe" />
                        </div>
                        <button type="submit" class="btn btn-primary">@((isEditing ? "Lưu thay đổi" : "Thêm phòng"))</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Phong> rooms;
    private Phong currentPhong = new Phong();
    private bool isEditing = false;
    private bool IsModalVisible = false;
    private string AlertMessage;
    private string AlertType;

    protected override async Task OnInitializedAsync()
    {
        await LoadRooms();
    }

    private async Task LoadRooms()
    {
        try
        {
            var response = await Http.GetStringAsync("api/Phong");
            rooms = JsonConvert.DeserializeObject<List<Phong>>(response);
        }
        catch (Exception ex)
        {
            SetAlert("Có lỗi xảy ra khi tải danh sách phòng: " + ex.Message, "danger");
        }
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;

        try
        {
            if (isEditing)
            {
                response = await Http.PutAsJsonAsync($"api/Phong/{currentPhong.IdPhong}", currentPhong);
                if (response.IsSuccessStatusCode)
                {
                    await LoadRooms();
                    currentPhong = new Phong();
                    isEditing = false;
                    CloseModal();
                    SetAlert("Phòng đã được cập nhật thành công!", "success");
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    SetAlert($"Có lỗi xảy ra khi cập nhật phòng: {errorMessage}", "danger");
                }
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/Phong", currentPhong);
                if (response.IsSuccessStatusCode)
                {
                    await LoadRooms();
                    currentPhong = new Phong();
                    isEditing = false;
                    CloseModal();
                    SetAlert("Phòng đã được thêm thành công!", "success");
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    SetAlert($"Có lỗi xảy ra khi thêm phòng: {errorMessage}", "danger");
                }
            }
        }
        catch (Exception ex)
        {
            SetAlert("Có lỗi xảy ra: " + ex.Message, "danger");
        }
    }

    private void ShowAddModal()
    {
        currentPhong = new Phong();
        isEditing = false;
        ShowModal();
    }

    private void EditPhong(Phong phong)
    {
        currentPhong = phong;
        isEditing = true;
        ShowModal();
    }

    private async Task DeletePhong(string id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Phong/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadRooms();
                SetAlert("Phòng đã được xóa thành công!", "success");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                SetAlert($"Có lỗi xảy ra khi xóa phòng: {errorMessage}", "danger");
            }
        }
        catch (Exception ex)
        {
            SetAlert("Có lỗi xảy ra: " + ex.Message, "danger");
        }
    }

    private void ShowModal()
    {
        IsModalVisible = true;
    }

    private void CloseModal()
    {
        IsModalVisible = false;
    }

    private void SetAlert(string message, string alertType)
    {
        AlertMessage = message;
        AlertType = alertType;
        StateHasChanged();
        _ = Task.Delay(3000).ContinueWith(t =>
        {
            AlertMessage = null;
            InvokeAsync(StateHasChanged);
        });
    }
}
