@page "/ghe"
@using ASM_CS6_AHTBCinemaPro_SD18301.Models
@using Newtonsoft.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1 class="text-center my-4">Danh sách ghế</h1>

<div id="alertPlaceholder"></div> <!-- Alert Placeholder for notifications -->

<div class="container">
    @if (ghes == null)
    {
        <p><em>Đang tải...</em></p>
    }
    else if (ghes.Count == 0)
    {
        <p>Không có ghế nào có sẵn.</p>
    }
    else
    {
        <div class="row mb-3">
            <div class="col-md-6">
                <input type="text" class="form-control" placeholder="Tìm theo ID" @bind="searchId" />
                <button class="btn btn-primary mt-2" @onclick="SearchGheById">Tìm kiếm</button>
                @if (searchResult != null)
                {
                    <div class="mt-3">
                        <h5>Kết quả tìm kiếm:</h5>
                        <p>@searchResult.TenGhe - @searchResult.Phong - @searchResult.TrangThai - @searchResult.LoaiGhe</p>
                    </div>
                }
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-success" @onclick="ShowAddModal">Thêm ghế mới</button>
            </div>
        </div>

        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Tên Ghế</th>
                    <th>Phòng</th>
                    <th>Trạng Thái</th>
                    <th>Loại Ghế</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ghe in ghes)
                {
                    <tr>
                        <td>@ghe.TenGhe</td>
                        <td>@ghe.Phong</td>
                        <td>@ghe.TrangThai</td>
                        <td>@ghe.LoaiGhe</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => EditGhe(ghe)">Sửa</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteGhe(ghe.IdGhe)">Xóa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Modal for Add/Edit -->
<div class="modal fade" id="gheModal" tabindex="-1" aria-labelledby="gheModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="gheModalLabel">@((isEditing ? "Sửa ghế" : "Thêm ghế mới"))</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng">Đóng</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@currentGhe" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="TenGhe" class="form-label">Tên Ghế</label>
                        <InputText id="TenGhe" class="form-control" @bind-Value="currentGhe.TenGhe" />
                    </div>
                    <div class="mb-3">
                        <label for="Phong" class="form-label">Phòng</label>
                        <InputText id="Phong" class="form-control" @bind-Value="currentGhe.Phong" />
                    </div>
                    <div class="mb-3">
                        <label for="TrangThai" class="form-label">Trạng Thái</label>
                        <InputText id="TrangThai" class="form-control" @bind-Value="currentGhe.TrangThai" />
                    </div>
                    <div class="mb-3">
                        <label for="LoaiGhe" class="form-label">Loại Ghế</label>
                        <InputText id="LoaiGhe" class="form-control" @bind-Value="currentGhe.LoaiGhe" />
                    </div>
                    <button type="submit" class="btn btn-primary">@((isEditing ? "Lưu thay đổi" : "Thêm ghế"))</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Ghe> ghes;
    private Ghe currentGhe = new Ghe();
    private string searchId;
    private Ghe searchResult;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadGhes();
    }

    private async Task LoadGhes()
    {
        var response = await Http.GetStringAsync("api/Ghe/GetGhe");
        ghes = JsonConvert.DeserializeObject<List<Ghe>>(response);
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(currentGhe.IdGhe))
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "Lỗi", "Không được để trống các trường.", "danger");
            return;
        }
        HttpResponseMessage response;

        if (isEditing)
        {
            response = await Http.PutAsJsonAsync($"api/Ghe/{currentGhe.IdGhe}", currentGhe);
        }
        else
        {
            response = await Http.PostAsJsonAsync("api/Ghe/AddGhe", currentGhe);
        }

        if (response.IsSuccessStatusCode)
        {
            await LoadGhes();
            currentGhe = new Ghe();
            isEditing = false;
            await JSRuntime.InvokeVoidAsync("hideModal");
            await JSRuntime.InvokeVoidAsync("showAlert", "Thành công", isEditing ? "Ghế đã được cập nhật!" : "Ghế đã được thêm!", "success");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("showAlert", "Lỗi", errorMessage, "danger");
        }
    }

    private void EditGhe(Ghe ghe)
    {
        currentGhe = ghe;
        isEditing = true;
        ShowModal();
    }

    private async Task DeleteGhe(string id)
    {
        var response = await Http.DeleteAsync($"api/Ghe/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadGhes();
            await JSRuntime.InvokeVoidAsync("showAlert", "Thành công", "Ghế đã được xóa!", "success");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("showAlert", "Lỗi", errorMessage, "danger");
        }
    }

    private async Task SearchGheById()
    {
        var response = await Http.GetStringAsync($"api/Ghe/{searchId}");
        if (string.IsNullOrEmpty(response))
        {
            searchResult = null;
            await JSRuntime.InvokeVoidAsync("showAlert", "Lỗi", "Không tìm thấy ghế.", "danger");
        }
        else
        {
            searchResult = JsonConvert.DeserializeObject<Ghe>(response);
        }
    }

    private async Task ShowAddModal()
    {
        currentGhe = new Ghe();
        isEditing = false;
        await JSRuntime.InvokeVoidAsync("showModal");
    }

    private async Task ShowModal()
    {
        await JSRuntime.InvokeVoidAsync("showModal");
    }
}
